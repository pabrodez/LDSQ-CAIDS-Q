colSums(as.data.table(childDF)[,lapply(.SD, is.na), .SDcols = numVarCh])
colSums(as.data.table(childDF)[,lapply(.SD, is.na), .SDcols = catVarAd])
colSums(as.data.table(childDF)[,lapply(.SD, is.na), .SDcols = catVarCh])
?scale_fill_manual
?scale_fill_manual
??scale_fill_manual
library(tidyverse)
?expand.grid
?theme_light
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDF <- tempDF[, order(colSums(tempDF))]
tempData <- expand.grid(list(x = 1:nrow(tempDF), y = colnames(tempDF)))
tempData$v <- as.vector(as.matrix(tempDF))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("") + ggtitle(title)
}
plotNa(adultDF, with = FALSE)
plotNa(adultDF)
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDF))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("") + ggtitle(title)
}
plotNa(adultDF)
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("") + ggtitle(title)
}
plotNa(adultDF)
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("Rows of data set") + ggtitle(title)
}
plotNa(adultDF)
?theme_light
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_linedraw() + ylab("") + xlab("Rows of data set") + ggtitle(title)
}
plotNa(adultDF)
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("Rows of data set") + ggtitle(title)
}
plotNa(adultDF)
plot(childDF)
View(childDF)
sapply(childDF[, names(childDF)], class)
View(childDF)
childDF <- factor(childDF$Assault.type.4)
plot(childDF)
childDF <- rbind(ch_dec_sub, ch_jun_sub)
childDF$Assault.type.4 <- factor(childDF$Assault.type.4)
plotNa(childDF)
summary(adultDF[, which(names(adultDF) == catVarAd)])
summary(adultDF[, catVarAd])
plotNa(adultDF)
plotNa(childDF)
plotNa(adultDF)
plotNa(childDF)
??savePlot
plotNa(childDF)
ggsave("NAs adult data-set.png", plot = lastplot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs children data-set.png", plot = lastplot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs adult data-set.png", plot = last_plot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs children data-set.png", plot = last_plot(), device = "png", path = "./plots")
plotNa(adultDF)
ggsave("NAs adult data-set.png", plot = last_plot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs children data-set.png", plot = last_plot(), device = "png", path = "./plots")
summary(adultDF[, .SD, .SDcols = catVarAd])
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
adultDF[1]
adultDF[[1]]
percNa <- function(dataIn) {
NaDataFrame <- data.frame()
for(i in dataIn[i])
NaDataFrame <- sum(is.na(i)) / nrow(dataIn)
print(NaDataFrame)
}
percNa(adultDF)
length(adultDF)
percNa <- function(dataIn) {
NaDataFrame <- data.frame()
for(i in length(dataIn))
NaDataFrame <- sum(is.na(dataIn[i])) / nrow(dataIn)
print(NaDataFrame)
}
percNa(adultDF)
percNa <- function(dataIn) {
NaDataFrame <- data.frame()
for(i in length(dataIn))
NaDataFrame <- sum(is.na(dataIn[i])) / nrow(dataIn)
}
percNa(adultDF)
percNa <- function(dataIn) {
listNa <- list()
for(i in length(dataIn))
NaDataFrame <- sum(is.na(dataIn[i])) / nrow(dataIn)
NaDataFrame <- as.data.frame(listNa)
}
percNa(adultDF)
percNa <- function(dataIn) {
listNa <- list()
for(i in length(dataIn))
NaDataFrame <- sum(is.na(dataIn[i])) / nrow(dataIn)
NaDataFrame <- as.data.frame(listNa)
NaDataFrame
}
percNa(adultDF)
percNa <- function(dataIn) {
listNa <- list()
for(i in length(dataIn))
NaDataFrame <- sum(is.na(dataIn[i])) / nrow(dataIn)
listNa
}
percNa(adultDF)
percNa <- function(dataIn) {
listNa <- list()
for(i in length(dataIn))
listNa <- sum(is.na(dataIn[i])) / nrow(dataIn)
listNa
}
percNa(adultDF)
sapply(adultDF, function(x) sum(is.na(adultDF[x])) / nrow(adultDF))
lapply(adultDF, function(x) sum(is.na(adultDF[x])) / nrow(adultDF))
lapply(adultDF, function(x) sum(is.na(x)) / nrow(x))
sapply(adultDF, function(x) sum(is.na(x)) / nrow(x))
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))
nrow(adultDF$Age)
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))
sapply(childDF, function(x) sum(is.na(x)) / nrow(childDF))
nrow(adultDF) - nrow(unique(adultDF))
unique(adultDF)
nrow(unique(adultDF))
duplicated(adultDF)
length(duplicate(adultDF))
length(duplicated(adultDF))
?distinct
distinct(adultDF)
length(distinct(adultDF))
unique(adultDF)
duplicated(adultDF)
length(as.numeric(duplicated(adultDF)))
length(numeric(duplicated(adultDF)))
??duplicated
data.table::duplicated(adultDF)
data.table::duplicated(adultDF)
data.table:duplicated(adultDF)
duplicated(adultDF)
as.numeric(duplicated(adultDF))
sum(duplicated(adultDF))
sum(duplicated(childDF))
childDF[duplicated(childDF), ]
childDF[duplicated(childDF), ]
childDF[duplicated(childDF), ]
summary(childDF$Gender)
summary(childDF$Referrer)
childDF$Gender <- as.factor(gsub(pattern = "FeMale", replacement = "Female", as.character(childDF$Gender)))
?which
diff_jun_dec <- setdiff(names(adult_jun_nov), names(adult_dec_may))
diff_dec_jun <- setdiff(names(adult_dec_may), names(adult_jun_nov))
setdiff(names(adult_jun_nov), names(adult_dec_may))
setdiff(names(adult_dec_may), names(adult_jun_nov))
setdiff(names(child_jun_nov), names(child_dec_may))
setdiff(names(child_dec_may), names(child_jun_nov))
colSums(sapply(adultDF, is.na))
dim(childDF)
colSums(sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(x)) / nrow(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(x)) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(as.data.table(adultDF)[,.SD, .SDcols = catVarAd], is.na))
library(data.table)
colSums(sapply(as.data.table(childDF)[,.SD, .SDcols = catVarCh], is.na))
colSums(sapply(adultDF, function(x) colSums(is.na(x)) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) colSums(is.na(adultDF[x])) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[x])) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[,x])) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[ ,x])) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[ , x])) / length(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[ , x])) / nrow(x)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[ , x])) / nrow(adultDF)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[x])) / nrow(adultDF)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(adultDF, function(x) sum(is.na(adultDF[ ,x])) / nrow(adultDF)))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
(sapply(adultDF, function(x) sum(is.na(adultDF[ ,x])) / nrow(adultDF))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(childDF, is.na))  # Same as above
# Using the vector for cat and num vars we could be specific
colSums(sapply(as.data.table(adultDF)[,.SD, .SDcols = catVarAd], is.na))
colSums(sapply(as.data.table(adultDF)[,.SD, .SDcols = numVarAd], is.na))
colSums(sapply(as.data.table(childDF)[,.SD, .SDcols = catVarCh], is.na))
colSums(sapply(as.data.table(childDF)[,.SD, .SDcols = numVarCh], is.na))
# Visualize map of NAs
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("Rows of data set") + ggtitle(title)
}
plotNa(adultDF)
ggsave("NAs adult data-set.png", plot = last_plot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs children data-set.png", plot = last_plot(), device = "png", path = "./plots")
# percentage of missing values in each variable
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))
sapply(childDF, function(x) sum(is.na(x)) / nrow(childDF))
# check duplicated rows
sum(duplicated(adultDF))
sum(duplicated(childDF))
childDF[duplicated(childDF), ]  # they don't seem as strict duplicates: Different dates.
# Summarize categorical data
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
summary(as.data.table(childDF)[, .SD, .SDcols = catVarCh])
(sapply(adultDF, function(x) sum(is.na(adultDF[ ,x])) / nrow(adultDF))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
colSums(sapply(childDF, is.na))  # Same as above
# Using the vector for cat and num vars we could be specific
colSums(sapply(as.data.table(adultDF)[,.SD, .SDcols = catVarAd], is.na))
colSums(sapply(as.data.table(adultDF)[,.SD, .SDcols = numVarAd], is.na))
colSums(sapply(as.data.table(childDF)[,.SD, .SDcols = catVarCh], is.na))
colSums(sapply(as.data.table(childDF)[,.SD, .SDcols = numVarCh], is.na))
# Visualize map of NAs
plotNa <- function(dataFrame, title = NULL) {
tempDf <- as.data.frame(ifelse(is.na(dataFrame), 0, 1))
tempDf <- tempDf[, order(colSums(tempDf))]
tempData <- expand.grid(list(x = 1:nrow(tempDf), y = colnames(tempDf)))
tempData$v <- as.vector(as.matrix(tempDf))
tempData <- data.frame(x = unlist(tempData$x), y = unlist(tempData$y), v = unlist(tempData$v))
ggplot(tempData) + geom_tile(aes(x=x, y=y, fill=factor(v))) +
scale_fill_manual(values=c("white", "black"), name="Missing value\n1=No, 0=Yes") +
theme_light() + ylab("") + xlab("Rows of data set") + ggtitle(title)
}
plotNa(adultDF)
ggsave("NAs adult data-set.png", plot = last_plot(), device = "png", path = "./plots")
plotNa(childDF)
ggsave("NAs children data-set.png", plot = last_plot(), device = "png", path = "./plots")
# percentage of missing values in each variable
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))
sapply(childDF, function(x) sum(is.na(x)) / nrow(childDF))
# check duplicated rows
sum(duplicated(adultDF))
sum(duplicated(childDF))
childDF[duplicated(childDF), ]  # they don't seem as strict duplicates: Different dates.
# Summarize categorical data
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
summary(as.data.table(childDF)[, .SD, .SDcols = catVarCh])
sapply(adultDF, function(x) sum(is.na(adultDF[ ,x])) / nrow(adultDF))
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))  # Assult type 2, 3 and 4 are not needed to be answered. While the 1st is usually answered the others can be if there are multiple types
sapply(childDF, function(x) sum(is.na(x)) / nrow(childDF))  # Same as above
getwd()
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
library(tidyverse)
library(data.table)
library(lubridate)
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
sapply(adultDF, function(x) sum(is.na(x)) / nrow(adultDF))
install.packages("extrafont")
install.packages("tikzDevice")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plotNa(adultDF$Gender)
percNa(adultDF$Gender)
plotNa(adultDF)
plotNa(adultDF)
plotNa(adultDF)
unlink('reports/Week 5-11 Feb/Report 5-11 Feb_cache', recursive = TRUE)
unlink('reports/Week 5-11 Feb/Report 5-11 Feb_cache', recursive = TRUE)
library(knitr)
knit2html("Report 5-11 Feb")
knit2html("/.C:/Users/Usuario/Desktop/R volunt/LDSQ-CAIDS-Q/reports/Week 5-11 FebReport 5-11 Feb")
knit2html("./reports/Week 5-11 FebReport 5-11 Feb")
getwd()
knit2html("./reports/Week 5-11 FebReport 5-11 Feb.Rmd")
list.files(./reports)
list.files("./reports")
knit2html("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd"
)
asdfasdf <-  adfadfadf
asdfasdf <-  "adfadfadf"
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
summary(as.data.table(adultDF)[, .SD, .SDcols = numVarAd])
summary(as.data.table(childDF)[, .SD, .SDcols = numVarCh])
asdfasdf <-  "adfadfadf"
asdfasdf <-  "adfadfadf"
rm(adfadfadf)
rm(asdfasdf)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
summary(as.data.frame(as.data.table(adultDF)[, .SD, .SDcols = numVarAd]))
summary(as.data.frame(as.data.table(adultDF)[, .SD, .SDcols = catVarAd]))
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
summary(as.data.table(childDF)[, .SD, .SDcols = numVarCh])
summary(as.data.table(childDF)[, .SD, .SDcols = catVarCh])
unlink('reports/Week 5-11 Feb/Report 5-11 Feb_cache', recursive = TRUE)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
ts(adultDF)
ggplot(adultDF, aes(x= adultDF$Date.attended, y = count(group_by(adultDF, Date.attended))))
ggplot(adultDF, aes(x= adultDF$Date.attended, y = group_by(adultDF, Date.attended)))
adult_date_group <- select(adultDF, Date.attended, Gender) %>% group_by(Date.attended)
str(adult_date_group)
count(adult_date_group$Date.attended)
ggplot(adult_date_group)
rm(adult_date_group)
adult_cat
exists(adult_cat)
exists("adult_cat")
adult_cat <- adultDF[,.SD, .SDcols = catVarAd]
adult_num <- adultDF[,.SD, .SDcols = numVarAd]
child_cat <- childDF[,.SD, .SDcols = catVarCh]
child_num <- childDF[,.SD, .SDcols = numVarCh]
adult_cat <- as.data.table(adultDF)[,.SD, .SDcols = catVarAd]
adult_num <- as.data.table(adultDF)[,.SD, .SDcols = numVarAd]
child_cat <- as.data.table(childDF)[,.SD, .SDcols = catVarCh]
child_num <- as.data.table(childDF)[,.SD, .SDcols = numVarCh]
?fun
?fun
??fun
?stat_count
?do.call
?grid.arrange
??grid.arrange
library(gridExtra)
plotHist <- function(input, i) {
data <- data.frame(x=input[[i]])
his <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(input)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (his)
}
grid_plot <- function(input, fun, ii, ncol=4) {
plot_list <- list()
for (i in ii) {
plot <- fun(data_in=data_in, i=i)
plot_list <- c(plot_list, list(plot))
}
grid.arrange(pp, ncol=ncol)
}
density_glot <- function(input, i){
data <- data.frame(x=input[[i]])
plot <- ggplot(data = data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(input)[i]), '\n', 'Skewness: ',round(skewness(input[[i]], na.rm = TRUE), 2))) + theme_light()
return(plot)
}
grid_plot(adult_cat, plotHist, 1:8)
grid_plot <- function(input, fun, ii, ncol=4) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
grid.arrange(pp, ncol=ncol)
}
grid_plot(adult_cat, plotHist, 1:8)
}
grid_plot <- function(input, fun, ii, ncol=4) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
grid.arrange(plot_list, ncol=ncol)
}
grid_plot(adult_cat, plotHist, 1:8)
grid_plot <- function(input, fun, ii, ncol=4) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
do.call("grid.arrange", c(plot_list, ncol=ncol))
}
grid_plot <- function(input, fun, ii, ncol=4) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
do.call("grid.arrange", c(plot_list, ncol=ncol))
}
grid_plot(adult_cat, plotHist, 1:8)
grid_plot <- function(input, fun, ii, ncol=2) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
do.call("grid.arrange", c(plot_list, ncol=ncol))
}
grid_plot(adult_cat, plotHist, 1:4)
grid_plot(adult_cat, plotHist, 1:4)
library(tidyverse)
grid_plot(adult_cat, plotHist, 1:4)
library(gridExtra)
grid_plot(adult_cat, plotHist, 1:4)
grid_plot(adult_cat, plotHist, c(1, -2, 3, 4))
grid_plot(adult_cat, plotHist, c(1, 3, 4))
grid_plot(adult_cat, plotHist, 5:8)
plotHist <- function(input, i) {
data <- data.frame(x=input[[i]])
his <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(input)[i]) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1))
return (his)
}
density_glot <- function(input, i){
data <- data.frame(x=input[[i]])
plot <- ggplot(data = data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(input)[i]), '\n', 'Skewness: ',round(skewness(input[[i]], na.rm = TRUE), 2))) + theme_light()
return(plot)
}
grid_plot <- function(input, fun, ii, ncol=1) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
do.call("grid.arrange", c(plot_list, ncol=ncol))
}
grid_plot(adult_cat, plotHist, 4:8)
grid_plot(adult_cat, plotHist, 5:8)
grid_plot(adult_cat, plotHist, c(1, 3, 4))
grid_plot(adult_cat, plotHist, 5:8)
grid_plot(adult_cat, plotHist, c(1, 3, 4))
grid_plot(adult_cat, plotHist, 15:18)
grid_plot(adult_num, density_glot, 1)
??skewness
library(e1071)
install.packages("e1071")
grid_plot(adult_num, density_glot, 1)
library(e1071)
grid_plot(adult_num, density_glot, 1)
grid_plot(child_num, density_glot, 1)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
library(data.table)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
grid_plot <- function(input, fun, ii, ncol=2) {
plot_list <- list()
for (i in ii) {
plot <- fun(input=input, i=i)
plot_list <- c(plot_list, list(plot))
}
do.call("grid.arrange", c(plot_list, ncol=ncol))
}
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
??supress
density_glot <- function(input, i){
data <- data.frame(x=input[[i]])
plot <- ggplot(data = data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(input)[i]), '\n', 'Skewness: ',round(skewness(input[[i]], na.rm = TRUE), 2))) + theme_light()
return(suppressWarnings(supresswarplot))
}
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
density_glot <- function(input, i){
data <- data.frame(x=input[[i]])
plot <- ggplot(data = data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(input)[i]), '\n', 'Skewness: ',round(skewness(input[[i]], na.rm = TRUE), 2))) + theme_light()
return(suppressWarnings(plot))
}
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
grid_plot(child_num, density_glot, ii= 1)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
grid_plot(adult_cat, plotHist, 5:8, ncol = 1)
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
rmarkdown::render("./reports/Week 5-11 Feb/Report 5-11 Feb.Rmd", "pdf_document")
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
library(data.table)
summary(as.data.table(adultDF)[, .SD, .SDcols = catVarAd])
